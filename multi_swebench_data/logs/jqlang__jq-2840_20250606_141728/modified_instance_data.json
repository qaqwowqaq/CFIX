{
  "repo": "jqlang/jq",
  "pull_number": 2840,
  "instance_id": "jqlang__jq-2840",
  "issue_numbers": [
    2826
  ],
  "base_commit": "4cf1408e0bbac8fc714b051fe420921905128efd",
  "patch": "diff --git a/src/execute.c b/src/execute.c\nindex abc1234..def5678 100644\n--- a/src/execute.c\n+++ b/src/execute.c\n@@ -1050,11 +1050,11 @@\n       // $array | .[-1]\n       if (jv_get_kind(k) == JV_KIND_NUMBER && jv_get_kind(t) == JV_KIND_ARRAY) {\n         int idx = jv_number_value(k);\n+        int len = jv_array_length(jv_copy(t));\n         if (idx < 0) {\n-          jv_free(k);\n-          k = jv_number(jv_array_length(jv_copy(t)) + idx);\n+          idx += len;\n         }\n-      }\n-      jv v = jv_get(t, jv_copy(k));\n+        jv_free(k);\n+        k = jv_number(idx);\n+      }\n+      jv v = idx >= 0 && idx < len ? jv_array_get(jv_copy(t), idx) : jv_invalid();\n       if (jv_is_valid(v)) {\n         path_append(jq, k, jv_copy(v));\n       } else {",
  "test_patch": "diff --git a/tests/jq.test b/tests/jq.test\nindex de38e4def6..1dcb2542c8 100644\n--- a/tests/jq.test\n+++ b/tests/jq.test\n@@ -248,9 +248,9 @@ null\n 2\n 3\n \n-.[-2]\n+[.[-4,-3,-2,-1,0,1,2,3]]\n [1,2,3]\n-2\n+[null,1,2,3,1,2,3,null]\n \n [range(0;10)]\n null\n@@ -1052,9 +1052,9 @@ pick(first|first)\n [[10]]\n \n # negative indices in path expressions (since last/1 is .[-1])\n-pick(last)\n-[[10,20],30]\n-[null,30]\n+try pick(last) catch .\n+[1,2]\n+\"Out of bounds negative array index\"\n \n #\n # Assignment\n",
  "problem_statement": "Array indexing of negative indices wraps twice\n**Describe the bug**\r\nNegative indices should wrap only once, not twice.\r\n\r\n**To Reproduce**\r\n`jq -n '[0,1,2] | .[-5]'` produces `1`.\r\n\r\n**Expected behavior**\r\nSince the array in the reproduction example has length 3, `.[-5]` can be `.[3-5]`, but still out of index so should produce `null`.\r\n\r\n**Environment (please complete the following information):**\r\n\r\n- OS and Version: macOS (whatever)\r\n- jq version: jq-1.7rc1-25-gf94a9d4\r\n\r\n**Additional context**\r\nLikely the regression of a6fe347322bfd57cab2d2612d8825b4ede765ac8.",
  "hints_text": "",
  "created_at": "",
  "original_patch": "diff --git a/docs/content/manual/manual.yml b/docs/content/manual/manual.yml\nindex 6382d8354a..e6edbc7ba0 100644\n--- a/docs/content/manual/manual.yml\n+++ b/docs/content/manual/manual.yml\n@@ -1048,10 +1048,11 @@ sections:\n       - title: \"`pick(pathexps)`\"\n         body: |\n \n-          Emit the projection of the input object or array defined by the specified\n-          sequence of path expressions, such that if p is any one of these specifications,\n-          then `(. | p)` will evaluate to the same value as `(. | pick(pathexps) | p)`.\n-          For arrays, negative indices and .[m:n] specifications should not be used.\n+          Emit the projection of the input object or array defined by the\n+          specified sequence of path expressions, such that if `p` is any\n+          one of these specifications, then `(. | p)` will evaluate to the\n+          same value as `(. | pick(pathexps) | p)`. For arrays, negative\n+          indices and `.[m:n]` specifications should not be used.\n \n         examples:\n           - program: 'pick(.a, .b.c, .x)'\ndiff --git a/jq.1.prebuilt b/jq.1.prebuilt\nindex f386b49ce8..162881c11b 100644\n--- a/jq.1.prebuilt\n+++ b/jq.1.prebuilt\n@@ -1050,7 +1050,7 @@ jq \\'map_values(\\. // empty)\\'\n .IP \"\" 0\n .\n .SS \"pick(pathexps)\"\n-Emit the projection of the input object or array defined by the specified sequence of path expressions, such that if p is any one of these specifications, then \\fB(\\. | p)\\fR will evaluate to the same value as \\fB(\\. | pick(pathexps) | p)\\fR\\. For arrays, negative indices and \\.[m:n] specifications should not be used\\.\n+Emit the projection of the input object or array defined by the specified sequence of path expressions, such that if \\fBp\\fR is any one of these specifications, then \\fB(\\. | p)\\fR will evaluate to the same value as \\fB(\\. | pick(pathexps) | p)\\fR\\. For arrays, negative indices and \\fB\\.[m:n]\\fR specifications should not be used\\.\n .\n .IP \"\" 4\n .\ndiff --git a/src/execute.c b/src/execute.c\nindex ae92c37317..367819e8a9 100644\n--- a/src/execute.c\n+++ b/src/execute.c\n@@ -694,14 +694,6 @@ jv jq_next(jq_state *jq) {\n         set_error(jq, jv_invalid_with_msg(msg));\n         goto do_backtrack;\n       }\n-      // $array | .[-1]\n-      if (jv_get_kind(k) == JV_KIND_NUMBER && jv_get_kind(t) == JV_KIND_ARRAY) {\n-        int idx = jv_number_value(k);\n-        if (idx < 0) {\n-          jv_free(k);\n-          k = jv_number(jv_array_length(jv_copy(t)) + idx);\n-        }\n-      }\n       jv v = jv_get(t, jv_copy(k));\n       if (jv_is_valid(v)) {\n         path_append(jq, k, jv_copy(v));\n",
  "ai_generated": true,
  "generation_timestamp": "2025-06-06T06:19:33.561249+00:00"
}