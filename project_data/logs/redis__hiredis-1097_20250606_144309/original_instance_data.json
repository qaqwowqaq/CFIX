{
  "repo": "redis/hiredis",
  "pull_number": 1097,
  "instance_id": "redis__hiredis-1097",
  "issue_numbers": [
    "956"
  ],
  "base_commit": "eaae7321c2c84c45f40ccb01233d299644f4e786",
  "patch": "diff --git a/fuzzing/format_command_fuzzer.c b/fuzzing/format_command_fuzzer.c\nindex 91adeac58..de125e08d 100644\n--- a/fuzzing/format_command_fuzzer.c\n+++ b/fuzzing/format_command_fuzzer.c\n@@ -48,10 +48,9 @@ int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\n     memcpy(new_str, data, size);\n     new_str[size] = '\\0';\n \n-    redisFormatCommand(&cmd, new_str);\n-\n-    if (cmd != NULL)\n+    if (redisFormatCommand(&cmd, new_str) != -1)\n         hi_free(cmd);\n+\n     free(new_str);\n     return 0;\n }\ndiff --git a/hiredis.c b/hiredis.c\nindex 91086f6f6..b2b4d1f58 100644\n--- a/hiredis.c\n+++ b/hiredis.c\n@@ -399,6 +399,11 @@ int redisvFormatCommand(char **target, const char *format, va_list ap) {\n                     /* Copy va_list before consuming with va_arg */\n                     va_copy(_cpy,ap);\n \n+                    /* Make sure we have more characters otherwise strchr() accepts\n+                     * '\\0' as an integer specifier. This is checked after above\n+                     * va_copy() to avoid UB in fmt_invalid's call to va_end(). */\n+                    if (*_p == '\\0') goto fmt_invalid;\n+\n                     /* Integer conversion (without modifiers) */\n                     if (strchr(intfmts,*_p) != NULL) {\n                         va_arg(ap,int);\n",
  "test_patch": "diff --git a/test.c b/test.c\nindex b90175214..3b98dda96 100644\n--- a/test.c\n+++ b/test.c\n@@ -330,10 +330,14 @@ static void test_format_commands(void) {\n     FLOAT_WIDTH_TEST(float);\n     FLOAT_WIDTH_TEST(double);\n \n-    test(\"Format command with invalid printf format: \");\n+    test(\"Format command with unhandled printf format (specifier 'p' not supported): \");\n     len = redisFormatCommand(&cmd,\"key:%08p %b\",(void*)1234,\"foo\",(size_t)3);\n     test_cond(len == -1);\n \n+    test(\"Format command with invalid printf format (specifier missing): \");\n+    len = redisFormatCommand(&cmd,\"%-\");\n+    test_cond(len == -1);\n+\n     const char *argv[3];\n     argv[0] = \"SET\";\n     argv[1] = \"foo\\0xxx\";\n",
  "problem_statement": "【fuzz】heap-buffer-overflow\n\r\n1、python infra/helper.py build_fuzzers --sanitizer address hiredis\r\n2、python infra/helper.py run_fuzzer hiredis format_command_fuzzer -rss_limit_mb=0\r\n\r\n==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000024715 at pc 0x00000054f1bb bp 0x7ffc63cf1490 sp 0x7ffc63cf1488\r\nREAD of size 1 at 0x602000024715 thread T0\r\nSCARINESS: 12 (1-byte-read-heap-buffer-overflow)\r\n    #0 0x54f1ba in redisvFormatCommand /src/hiredis/hiredis.c:231:11\r\n    #1 0x54f45e in redisFormatCommand /src/hiredis/hiredis.c:460:11\r\n    #2 0x54d599 in LLVMFuzzerTestOneInput /src/hiredis/format_command_fuzzer.c:51:5\r\n    #3 0x458241 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15\r\n    #4 0x457985 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:470:3\r\n    #5 0x459a57 in fuzzer::Fuzzer::MutateAndTestOne() /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:698:19\r\n    #6 0x45a4d5 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:832:5\r\n    #7 0x4494ae in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:826:6\r\n    #8 0x471c82 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10\r\n    #9 0x7ff76646882f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\r\n    #10 0x41dbb8 in _start (/out/format_command_fuzzer+0x41dbb8)\r\n\r\n0x602000024715 is located 0 bytes to the right of 5-byte region [0x602000024710,0x602000024715)\r\nallocated by thread T0 here:\r\n    #0 0x51d8fd in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3\r\n    #1 0x54d54a in LLVMFuzzerTestOneInput /src/hiredis/format_command_fuzzer.c:44:15\r\n    #2 0x458241 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:556:15\r\n    #3 0x457985 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:470:3\r\n    #4 0x459a57 in fuzzer::Fuzzer::MutateAndTestOne() /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:698:19\r\n    #5 0x45a4d5 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:832:5\r\n    #6 0x4494ae in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:826:6\r\n    #7 0x471c82 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10\r\n    #8 0x7ff76646882f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\r\nSUMMARY: AddressSanitizer: heap-buffer-overflow /src/hiredis/hiredis.c:231:11 in redisvFormatCommand\r\nShadow bytes around the buggy address:\r\n  0x0c047fffc890: fa fa fd fa fa fa fd fa fa fa fd fd fa fa fd fd\r\n  0x0c047fffc8a0: fa fa fd fa fa fa fd fa fa fa fd fd fa fa fd fd\r\n  0x0c047fffc8b0: fa fa fd fa fa fa fd fd fa fa fd fd fa fa fd fd\r\n  0x0c047fffc8c0: fa fa fd fa fa fa fd fa fa fa fd fd fa fa fd fd\r\n  0x0c047fffc8d0: fa fa fd fa fa fa fd fd fa fa fd fd fa fa 04 fa\r\n=>0x0c047fffc8e0: fa fa[05]fa fa fa fd fd fa fa 00 03 fa fa 00 fa\r\n  0x0c047fffc8f0: fa fa 00 01 fa fa fd fd fa fa fa fa fa fa fa fa\r\n  0x0c047fffc900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c047fffc910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c047fffc920: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x0c047fffc930: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07\r\nHeap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n  Shadow gap:              cc\r\n==13==ABORTING\r\nMS: 4 InsertByte-ChangeByte-CopyPart-CrossOver-; base unit: 3b14a47b85ca3137afa69b9a883507a1bb29eeb8\r\n0x23,0x20,0x25,0x20,\r\n# %\r\nartifact_prefix='./'; Test unit written to ./crash-9178db74f1ab7d2b70b823088539af55ad353c9d\r\n\n",
  "hints_text": "",
  "created_at": "2022-09-01T15:31:31Z"
}