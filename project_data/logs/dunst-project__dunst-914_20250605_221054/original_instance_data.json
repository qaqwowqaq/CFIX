{
  "repo": "dunst-project/dunst",
  "pull_number": 914,
  "instance_id": "dunst-project__dunst-914",
  "issue_numbers": [
    "900"
  ],
  "base_commit": "82c8c06907df9cc653fd108adca9a84ca5de36e0",
  "patch": "diff --git a/src/utils.c b/src/utils.c\nindex f1d5fd52c..031d285cc 100644\n--- a/src/utils.c\n+++ b/src/utils.c\n@@ -124,14 +124,25 @@ void string_strip_delimited(char *str, char a, char b)\n         assert(str);\n \n         int iread=-1, iwrite=0, copen=0;\n+        int cskip = 0;\n         while (str[++iread] != 0) {\n                 if (str[iread] == a) {\n                         ++copen;\n                 } else if (str[iread] == b && copen > 0) {\n                         --copen;\n                 } else if (copen == 0) {\n+                        cskip = 0;\n                         str[iwrite++] = str[iread];\n                 }\n+                if (copen > 0){\n+                        cskip++;\n+                }\n+        }\n+        if (copen > 0) {\n+                iread -= cskip;\n+                for (int i = 0; i < cskip; i++) {\n+                        str[iwrite++] = str[iread++];\n+                }\n         }\n         str[iwrite] = 0;\n }\n",
  "test_patch": "diff --git a/test/markup.c b/test/markup.c\nindex 0644dd2d5..da6521acf 100644\n--- a/test/markup.c\n+++ b/test/markup.c\n@@ -15,7 +15,7 @@ TEST test_markup_strip(void)\n         g_free(ptr);\n         ASSERT_STR_EQ(\"&amp;\", (ptr=markup_strip(g_strdup(\"&amp;amp;\"))));\n         g_free(ptr);\n-        ASSERT_STR_EQ(\">A  \", (ptr=markup_strip(g_strdup(\">A <img> <string\"))));\n+        ASSERT_STR_EQ(\">A  <string\", (ptr=markup_strip(g_strdup(\">A <img> <string\"))));\n         g_free(ptr);\n \n         PASS();\ndiff --git a/test/utils.c b/test/utils.c\nindex bb793752d..ade0e298d 100644\n--- a/test/utils.c\n+++ b/test/utils.c\n@@ -119,10 +119,6 @@ TEST test_string_strip_delimited(void)\n         string_strip_delimited(text, '<', '>');\n         ASSERT_STR_EQ(\"Remove html tags\", text);\n \n-        strcpy(text, \"Calls|with|identical|delimiters|are|handled|properly\");\n-        string_strip_delimited(text, '|', '|');\n-        ASSERT_STR_EQ(\"Calls\", text);\n-\n         strcpy(text, \"<Return empty string if there is nothing left>\");\n         string_strip_delimited(text, '<', '>');\n         ASSERT_STR_EQ(\"\", text);\n@@ -131,6 +127,18 @@ TEST test_string_strip_delimited(void)\n         string_strip_delimited(text, '<', '>');\n         ASSERT_STR_EQ(\"Nothing is done if there are no delimiters in the string\", text);\n \n+        strcpy(text, \"We <3 dunst\");\n+        string_strip_delimited(text, '<', '>');\n+        ASSERT_STR_EQ(\"We <3 dunst\", text);\n+\n+        strcpy(text, \"<b>We</b> <3 dunst\");\n+        string_strip_delimited(text, '<', '>');\n+        ASSERT_STR_EQ(\"We <3 dunst\", text);\n+\n+        strcpy(text, \"dunst > the rest\");\n+        string_strip_delimited(text, '<', '>');\n+        ASSERT_STR_EQ(\"dunst > the rest\", text);\n+\n         g_free(text);\n         PASS();\n }\n",
  "problem_statement": "Opening angle bracket \"<\" breaks rendering\n`notify-send  \"title\"  \"We <3 dunst\"` shows up as:  \r\n\r\n![image](https://user-images.githubusercontent.com/1058151/132224981-c97cc72d-fefd-4264-bbf9-b413a85de8fb.png)\r\n\r\n`notify-send  \"title\"  \"We <3> dunst\"`:  \r\n\r\n![image](https://user-images.githubusercontent.com/1058151/132225032-4c4525ea-b4a1-408c-a2a0-104530fe368e.png)\r\n\r\nEven a mere `notify-send  \"title\"  \"We < dunst\"` shows up cut off at <.\r\n\r\nI have activated markup support in my dunstrc, but I think dunst should ignore these strings because they are incomplete and do not collide with supported tags (b, i, s, u).\r\n### Installation info\r\n- Version: `v1.6.1`\r\n- Install type: `manual`\r\n- Distro and version: `Xubuntu 18.04+i3-gaps `\r\n\n",
  "hints_text": "Pretty sure this is caused by the markup setting in the config\r\n```\r\n    # Possible values are:\r\n    # full: Allow a small subset of html markup in notifications:\r\n    #        <b>bold</b>\r\n    #        <i>italic</i>\r\n    #        <s>strikethrough</s>\r\n    #        <u>underline</u>\r\n    #\r\n    #        For a complete reference see\r\n    #        <https://developer.gnome.org/pango/stable/pango-Markup.html>.\r\n    #\r\n    # strip: This setting is provided for compatibility with some broken\r\n    #        clients that send markup even though it's not enabled on the\r\n    #        server. Dunst will try to strip the markup but the parsing is\r\n    #        simplistic so using this option outside of matching rules for\r\n    #        specific applications *IS GREATLY DISCOURAGED*.\r\n    #\r\n    # no:    Disable markup parsing, incoming notifications will be treated as\r\n    #        plain text. Dunst will not advertise that it has the body-markup\r\n    #        capability if this is set as a global setting.\r\n    #\r\n    # It's important to note that markup inside the format option will be parsed\r\n    # regardless of what this is set to.\r\n    markup = full\r\n\r\n```\r\nTurning this to no should fix it but it is still a problem... \r\n\r\n`notify-send \"title\" \"We \\<3 dunst\"` doesn't fix it also.\nIf you're using markup=full, the markup is completely handled by pango, so you should report a bug there. If you use markup=strip you can see there's a warning in the documentation that it's not perfect and this would not be considered a bug.\nEither way, I believe this issue can be closed on our side. \n[Link to the issues page of pango](https://gitlab.gnome.org/GNOME/pango/-/issues?scope=all&state=opened&search=%3C)\nI created a pango issue [here](https://gitlab.gnome.org/GNOME/pango/-/issues/612)\nTurns out, this is not a pango bug, but intended behaviour It's just plain xml. We should encode `<` with `&lt;` and to prevent accidental encodings, replace `&` with `&amp;`.\n@fwSmit You mean dunst should respect HTML entities? It seems pango is not implementing [all html entities](https://dev.w3.org/html5/html-author/charref). I didn't find relevant info on what chars to escape in [pango docs](https://docs.gtk.org/Pango).  \r\n\r\nSo at this point, I think our best bet is `sed`ing `<` with `&lt;` before piping the string to `notify-send`\n> @fwSmit You mean dunst should respect HTML entities? It seems pango is not implementing [all html entities](https://dev.w3.org/html5/html-author/charref). I didn't find relevant info on what chars to escape in [pango docs](https://docs.gtk.org/Pango).  \n\nThe docs aren't clear on this, but at least & and < have to be encoded. I think I'll encode \", ' and > too just to be safe. \n\n\n> So at this point, I think our best bet is `sed`ing `<` with `&lt;` before piping the string to `notify-send`\n\nNo I'll implement it inside of dunst. Then it won't matter what is passed via notify-send\n\nI wasn't entirely correct here. Since you're allowed to put markup in the notification body, we can't just escape all markup symbols. The right solution is indeed to make sure you escape any markup symbols you want to send.\nWe can, however improve the way incorrect notifications are handled. Too much of the notification is stripped away, resulting in what you've noticed ",
  "created_at": "2021-09-21T10:15:23Z"
}